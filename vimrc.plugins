

source $VIMRUNTIME/ftplugin/man.vim

" ---------------------------------------------------
Plugin 'gmarik/Vundle.vim'

" ---------------------------------------------------
Plugin 'vim-scripts/taglist.vim'
nnoremap <unique> <silent> tl :TlistToggle<CR>

let Tlist_Ctags_Cmd = '/usr/bin/ctags' " location of ctags tool
let Tlist_Show_One_File = 1 " Displaying tags for only one file~
let Tlist_Exist_OnlyWindow = 1 " if you are the last, kill yourself
let Tlist_Use_Right_Window = 1 " split to the right side of the screen
let Tlist_Sort_Type = "order" " sort by order or name
let Tlist_Display_Prototype = 0 " do not show prototypes and not tags in the taglist window.
let Tlist_Compart_Format = 1 " Remove extra information and blank lines from the taglist window.
let Tlist_GainFocus_On_ToggleOpen = 1 " Jump to taglist window on open.
let Tlist_Display_Tag_Scope = 1 " Show tag scope next to the tag name.
let Tlist_Close_On_Select = 0 " Close the taglist window when a file or tag is selected.
let Tlist_BackToEditBuffer = 0 " If no close on select, let the user choose back to edit buffer or not
let Tlist_Enable_Fold_Column = 0 " Don't Show the fold indicator column in the taglist window.
let Tlist_WinWidth = 40
let Tlist_Compact_Format = 1 " do not show help

" ---------------------------------------------------
" vim-color-solarized
Plugin 'altercation/vim-colors-solarized'
if !has('gui_running')
    set t_Co=256 " make sure our terminal use 256 color
    let g:solarized_termcolors = 256
endif


" ---------------------------------------------------
" nerdtree
Plugin 'scrooloose/nerdtree'
nmap <F3> :NERDTreeToggle<CR>
let NERDTreeWinSize=32
let NERDTreeWinPos="left"
let NERDTreeShowHidden=1
let NERDTreeMinimalUI=1
let NERDTreeDirArrows=0
let g:NERDTreeMapOpenSplit='s'
let g:NERDTreeMapOpenVSplit='v'
let NERDTreeAutoDeleteBuffer=1


" ---------------------------------------------------
" minibufexpl
Plugin 'fholgado/minibufexpl.vim'
nnoremap [b :MBEbp <CR>
nnoremap ]b :MBEbn <CR>


" ---------------------------------------------------
" vim-signature
Plugin 'kshenoy/vim-signature'
let g:SignatureMap = {
        \ 'Leader'             :  "m",
        \ 'PlaceNextMark'      :  "m,",
        \ 'ToggleMarkAtLine'   :  "m.",
        \ 'PurgeMarksAtLine'   :  "m-",
        \ 'DeleteMark'         :  "dm",
        \ 'PurgeMarks'         :  "mda",
        \ 'PurgeMarkers'       :  "m<BS>",
        \ 'GotoNextLineAlpha'  :  "']",
        \ 'GotoPrevLineAlpha'  :  "'[",
        \ 'GotoNextSpotAlpha'  :  "`]",
        \ 'GotoPrevSpotAlpha'  :  "`[",
        \ 'GotoNextLineByPos'  :  "]'",
        \ 'GotoPrevLineByPos'  :  "['",
        \ 'GotoNextSpotByPos'  :  "mn",
        \ 'GotoPrevSpotByPos'  :  "mp",
        \ 'GotoNextMarker'     :  "[+",
        \ 'GotoPrevMarker'     :  "[-",
        \ 'GotoNextMarkerAny'  :  "]=",
        \ 'GotoPrevMarkerAny'  :  "[=",
        \ 'ListLocalMarks'     :  "ml",
        \ 'ListLocalMarkers'   :  "m?"
        \ }

" ---------------------------------------------------
" ctrlp: invoke by <ctrl-p>
Plugin 'kien/ctrlp.vim'
let g:ctrlp_working_path_mode = ''
let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:10,results:10'
let g:ctrlp_follow_symlinks = 2
nnoremap <unique> <leader>bs :CtrlPBuffer<CR>

" " ---------------------------------------------------
Plugin 'dyng/ctrlsf.vim'
let g:ctrlsf_ackprg = 'ag'
let g:ctrlsf_position = 'left'
let g:ctrlsf_winsize = '40%'
let g:ctrlsf_context = '-B 5 -A 3'
let g:ctrlsf_auto_close = 0
nnoremap <Leader>ag :CtrlSF <C-r><C-w><CR>

" LargeFile
" ---------------------------------------------------
Plugin 'vim-scripts/LargeFile'
let g:LargeFile= 5 " files >= 5MB will use LargeFile rules

" ---------------------------------------------------
Plugin 'vim-scripts/AutoComplPop'

" ---------------------------------------------------
Plugin 'Yggdroot/indentLine'

" ---------------------------------------------------
Plugin 'sjl/gundo.vim'
nnoremap <F5> :GundoToggle<CR>

" ---------------------------------------------------
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger='<s-tab>'
let g:UltiSnipsEditSplit="vertical"

" ---------------------------------------------------
Plugin 'tpope/vim-fugitive'

" ---------------------------------------------------
Plugin 'bling/vim-airline'

" ---------------------------------------------------
Plugin 'vim-scripts/cscope.vim'
nmap <leader>gs :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <leader>gg :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <leader>gc :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <leader>gt :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <leader>ge :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <leader>gf :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <leader>gi :cs find i <C-R>=expand("<cfile>")<CR><CR>
nmap <leader>gd :cs find d <C-R>=expand("<cword>")<CR><CR>

Plugin 'vim-scripts/OmniCppComplete'
set tags+=./tags
" OmniCppComplete
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " 显示函数参数列表
let OmniCpp_MayCompleteDot = 1   " 输入 .  后自动补全
let OmniCpp_MayCompleteArrow = 1 " 输入 -> 后自动补全
let OmniCpp_MayCompleteScope = 1 " 输入 :: 后自动补全
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]

" au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
" set completeopt=menuone,menu,longest
